// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Skinet.Data;

namespace Skinet.Data.Migrations
{
    [DbContext(typeof(SkinetContext))]
    [Migration("20210107013704_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("Skinet.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(180)")
                        .HasMaxLength(180);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<double>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProductBrandId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProductTypeId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TierPriceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TierPriceId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("ProductBrandId1");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("ProductTypeId1");

                    b.HasIndex("TierPriceId");

                    b.HasIndex("TierPriceId1");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Skinet.Model.ProductBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductBrand");
                });

            modelBuilder.Entity("Skinet.Model.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("Skinet.Model.TierPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<double>("Percent")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TierPrice");
                });

            modelBuilder.Entity("Skinet.Model.Product", b =>
                {
                    b.HasOne("Skinet.Model.ProductBrand", "ProductBrand")
                        .WithMany()
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skinet.Model.ProductBrand", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductBrandId1");

                    b.HasOne("Skinet.Model.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skinet.Model.ProductType", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId1");

                    b.HasOne("Skinet.Model.TierPrice", "TierPrice")
                        .WithMany()
                        .HasForeignKey("TierPriceId");

                    b.HasOne("Skinet.Model.TierPrice", null)
                        .WithMany("Products")
                        .HasForeignKey("TierPriceId1");
                });
#pragma warning restore 612, 618
        }
    }
}
